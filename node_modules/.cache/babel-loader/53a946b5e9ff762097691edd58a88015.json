{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { useMemo } from 'react';\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */\n\nexport function useAccept(spec) {\n  var accept = spec.accept;\n  return useMemo(function () {\n    invariant(spec.accept != null, 'accept must be defined');\n    return Array.isArray(accept) ? accept : [accept];\n  }, [accept]);\n}","map":{"version":3,"names":["invariant","useMemo","useAccept","spec","accept","Array","isArray"],"sources":["C:/Users/user/Downloads/Compressed/baby-name-list-master/baby-name-list-master/node_modules/react-dnd/dist/esm/hooks/useDrop/useAccept.js"],"sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { useMemo } from 'react';\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */\n\nexport function useAccept(spec) {\n  var accept = spec.accept;\n  return useMemo(function () {\n    invariant(spec.accept != null, 'accept must be defined');\n    return Array.isArray(accept) ? accept : [accept];\n  }, [accept]);\n}"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;EAC9B,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;EACA,OAAOH,OAAO,CAAC,YAAY;IACzBD,SAAS,CAACG,IAAI,CAACC,MAAL,IAAe,IAAhB,EAAsB,wBAAtB,CAAT;IACA,OAAOC,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,CAAxC;EACD,CAHa,EAGX,CAACA,MAAD,CAHW,CAAd;AAID"},"metadata":{},"sourceType":"module"}